{"version":3,"sources":["components/ButtonOpenClose/ButtonOpenClose.jsx","components/Loader/Loader.jsx","components/PostsList/PostsList.jsx","components/NewCommentForm/NewCommentForm.jsx","api/api.js","api/posts.js","api/comments.js","components/ButtonShowHide/ButtonShowHide.jsx","components/Comment/Comment.jsx","components/CommentsLIst/CommentsList.jsx","components/CommentsDetails/CommentsDetails.jsx","components/PostDetails/PostDetails.jsx","App.jsx","index.js"],"names":["ButtonOpenClose","changePostId","postId","useState","isClicked","setIsClicked","type","className","onClick","Loader","PostsList","posts","length","map","post","key","id","userId","title","NewCommentForm","add","name","setName","email","setEmail","body","setBody","onSubmit","e","preventDefault","placeholder","value","onChange","event","target","request","url","options","fetch","then","response","ok","Error","status","statusText","json","result","data","getUserPosts","a","method","filter","getPostDetails","getPostComments","comments","comment","addComment","newComment","headers","JSON","stringify","removeComment","commentId","ButtonShowHide","commentsLength","isShowedCommentsOnClick","Comment","remove","CommentsList","CommentsDetails","isShowedComments","setIsShowedComments","bool","PostDetails","setComments","setPost","removedCommentId","filteredComments","useEffect","getDetails","postFromServer","getComments","commentsFromServer","App","setPosts","setUserId","selectedPostId","setSelectedPostId","userPostsFromServer","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.2219fea1.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\n\nexport const ButtonOpenClose = ({\n  changePostId,\n  postId,\n}) => {\n  const [isClicked, setIsClicked] = useState(false);\n\n  return (\n    <>\n      {isClicked ? (\n        <button\n          type=\"button\"\n          className=\"PostsList__button button\"\n          onClick={() => {\n            changePostId(0);\n            setIsClicked(false);\n          }}\n        >\n          Close\n        </button>\n      ) : (\n        <button\n          type=\"button\"\n          className=\"PostsList__button button\"\n          onClick={() => {\n            changePostId(postId);\n            setIsClicked(true);\n          }}\n        >\n          Open\n        </button>\n      )}\n    </>\n  );\n};\n\nButtonOpenClose.propTypes = {\n  changePostId: PropTypes.func.isRequired,\n  postId: PropTypes.number.isRequired,\n};\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './PostsList.scss';\nimport { ButtonOpenClose } from '../ButtonOpenClose';\nimport { Loader } from '../Loader';\n\nexport const PostsList = ({\n  posts,\n  changePostId,\n}) => (\n  <>\n    {!posts.length ? (\n      <Loader />\n    ) : (\n      <div className=\"PostsList\">\n        <h2>Posts:</h2>\n\n        <ul className=\"PostsList__list\">\n          {posts.map(post => (\n            <li\n              key={post.id}\n              className=\"PostsList__item\"\n            >\n              <div>\n                <b>{`User #${post.userId}`}</b>\n                <br />\n                {post.title}\n              </div>\n              <ButtonOpenClose\n                changePostId={changePostId}\n                postId={post.id}\n              />\n            </li>\n          ))}\n        </ul>\n      </div>\n    )}\n  </>\n);\n\nPostsList.propTypes = {\n  posts: PropTypes.arrayOf(PropTypes.shape({\n    id: PropTypes.number.isRequired,\n    userId: PropTypes.number.isRequired,\n    title: PropTypes.string.isRequired,\n  }).isRequired).isRequired,\n  changePostId: PropTypes.func.isRequired,\n};\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport './NewCommentForm.scss';\n\nexport const NewCommentForm = ({\n  postId,\n  add,\n}) => {\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n  const [body, setBody] = useState('');\n\n  const setValueName = (event) => {\n    const { value } = event.target;\n\n    setName(value);\n  };\n\n  const setValueEmail = (event) => {\n    const { value } = event.target;\n\n    setEmail(value);\n  };\n\n  const setValueBody = (event) => {\n    const { value } = event.target;\n\n    setBody(value);\n  };\n\n  const handleSubmitNewComment = (e) => {\n    e.preventDefault();\n\n    const newComment = {\n      postId,\n      name,\n      email,\n      body,\n    };\n\n    add(newComment);\n\n    setName('');\n    setEmail('');\n    setBody('');\n  };\n\n  return (\n    <form\n      className=\"NewCommentForm\"\n      onSubmit={handleSubmitNewComment}\n    >\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"name\"\n          placeholder=\"Your name\"\n          className=\"NewCommentForm__input\"\n          value={name}\n          onChange={setValueName}\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"email\"\n          placeholder=\"Your email\"\n          className=\"NewCommentForm__input\"\n          value={email}\n          onChange={setValueEmail}\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <textarea\n          name=\"body\"\n          placeholder=\"Type comment here\"\n          className=\"NewCommentForm__input\"\n          value={body}\n          onChange={setValueBody}\n        />\n      </div>\n\n      <button\n        type=\"submit\"\n        className=\"NewCommentForm__submit-button button\"\n      >\n        Add a comment\n      </button>\n    </form>\n  );\n};\n\nNewCommentForm.propTypes = {\n  postId: PropTypes.number.isRequired,\n  add: PropTypes.func.isRequired,\n};\n","export const BASE_URL = 'https://mate-api.herokuapp.com';\n\nexport const request = (url, options) => fetch(`${BASE_URL}${url}`, options)\n  .then((response) => {\n    if (!response.ok) {\n      throw new Error(`${response.status} - ${response.statusText}`);\n    }\n\n    return response.json();\n  })\n  .then(result => result.data);\n\nexport const post = (url, data) => request(url, {\n  method: 'POST',\n  headers: {\n    'Content-type': 'application/json; charset=UTF-8',\n  },\n  body: JSON.stringify(data),\n});\n\nexport const remove = url => request(url, {\n  method: 'DELETE',\n});\n","import { request } from './api';\n\nexport const getUserPosts = async(userId) => {\n  const posts = await request('/posts', { method: 'GET' });\n\n  if (!userId) {\n    return posts;\n  }\n\n  return posts.filter(post => post.userId === userId);\n};\n\nexport const getPostDetails = async(postId) => {\n  const post = await request(`/posts/${postId}`, { method: 'GET' });\n\n  if (!postId) {\n    return null;\n  }\n\n  return post;\n};\n","import { request, post, remove } from './api';\n\nexport const getPostComments = async(postId) => {\n  const comments = await request('/comments');\n\n  if (!postId) {\n    return [];\n  }\n\n  return comments.filter(comment => comment.postId === postId);\n};\n\nexport const addComment = async newComment => post('/comments', {\n  ...newComment,\n});\n\nexport const removeComment = async commentId => remove(\n  `/comments/${commentId}`,\n);\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\n\nexport const ButtonShowHide = ({\n  commentsLength,\n  isShowedCommentsOnClick,\n}) => {\n  const [isClicked, setIsClicked] = useState(false);\n\n  return (\n    <>\n      {isClicked ? (\n        <button\n          type=\"button\"\n          className=\"button\"\n          onClick={() => {\n            setIsClicked(false);\n            isShowedCommentsOnClick(false);\n          }}\n        >\n          {`Hide ${commentsLength} comments`}\n        </button>\n      ) : (\n        <button\n          type=\"button\"\n          className=\"button\"\n          onClick={() => {\n            setIsClicked(true);\n            isShowedCommentsOnClick(true);\n          }}\n        >\n          {`Show ${commentsLength} comments`}\n        </button>\n      )}\n    </>\n  );\n};\n\nButtonShowHide.propTypes = {\n  commentsLength: PropTypes.number.isRequired,\n  isShowedCommentsOnClick: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nexport const Comment = ({\n  comment,\n  remove,\n}) => (\n  <li className=\"PostDetails__list-item\">\n    <button\n      type=\"button\"\n      className=\"PostDetails__remove-button button\"\n      onClick={() => remove(comment.id)}\n    >\n      X\n    </button>\n    <p>{comment.body}</p>\n  </li>\n);\n\nComment.propTypes = {\n  remove: PropTypes.func.isRequired,\n  comment: PropTypes.shape({\n    id: PropTypes.number,\n    body: PropTypes.string.isRequired,\n  }).isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Comment } from '../Comment';\n\nexport const CommentsList = ({\n  remove,\n  comments,\n}) => (\n  <ul className=\"PostDetails__list\">\n    {comments.map(comment => (\n      <Comment\n        key={comment.id}\n        comment={comment}\n        remove={remove}\n      />\n    ))}\n  </ul>\n);\n\nCommentsList.propTypes = {\n  remove: PropTypes.func.isRequired,\n  comments: PropTypes.arrayOf(PropTypes.shape({\n    id: PropTypes.number,\n    body: PropTypes.string.isRequired,\n  }).isRequired).isRequired,\n};\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { ButtonShowHide } from '../ButtonShowHide';\nimport { CommentsList } from '../CommentsLIst';\n\nexport const CommentsDetails = ({\n  commentsLength,\n  comments,\n  remove,\n}) => {\n  const [isShowedComments, setIsShowedComments] = useState(false);\n\n  const isShowedCommentsOnClick = (bool) => {\n    setIsShowedComments(bool);\n  };\n\n  return (\n    <section className=\"PostDetails__comments\">\n      <ButtonShowHide\n        commentsLength={commentsLength}\n        isShowedCommentsOnClick={isShowedCommentsOnClick}\n      />\n      {isShowedComments && (\n        <CommentsList\n          comments={comments}\n          remove={remove}\n        />\n      )}\n    </section>\n  );\n};\n\nCommentsDetails.propTypes = {\n  commentsLength: PropTypes.number.isRequired,\n  comments: PropTypes.arrayOf(PropTypes.shape({\n    id: PropTypes.number,\n    body: PropTypes.string.isRequired,\n  }).isRequired).isRequired,\n  remove: PropTypes.func.isRequired,\n};\n","import React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { NewCommentForm } from '../NewCommentForm';\nimport './PostDetails.scss';\nimport { Loader } from '../Loader';\nimport { getPostDetails } from '../../api/posts';\nimport { getPostComments, addComment, removeComment } from '../../api/comments';\nimport { CommentsDetails } from '../CommentsDetails';\n\nexport const PostDetails = ({ postId }) => {\n  const [comments, setComments] = useState([]);\n  const [post, setPost] = useState(null);\n\n  const add = async(newComment) => {\n    await addComment(newComment);\n\n    setComments([...comments, newComment]);\n  };\n\n  const remove = async(removedCommentId) => {\n    await removeComment(removedCommentId);\n    const filteredComments = comments.filter(\n      comment => removedCommentId !== comment.id,\n    );\n\n    setComments(filteredComments);\n  };\n\n  useEffect(() => {\n    const getDetails = async() => {\n      const postFromServer = await getPostDetails(postId);\n\n      setPost(postFromServer);\n    };\n\n    const getComments = async() => {\n      const commentsFromServer = await getPostComments(postId);\n\n      setComments(commentsFromServer);\n    };\n\n    getDetails();\n    getComments();\n  }, [postId]);\n\n  return (\n    <>\n      {!post ? (\n        <Loader />\n      ) : (\n        <div className=\"PostDetails\">\n          <h2>Post details:</h2>\n\n          <section className=\"PostDetails__post\">\n            <p>{post.body}</p>\n          </section>\n\n          {!!comments.length && (\n            <CommentsDetails\n              commentsLength={comments.length}\n              comments={comments}\n              remove={remove}\n            />\n          )}\n\n          <section>\n            <div className=\"PostDetails__form-wrapper\">\n              <NewCommentForm\n                postId={postId}\n                add={add}\n              />\n            </div>\n          </section>\n        </div>\n      )}\n    </>\n  );\n};\n\nPostDetails.propTypes = {\n  postId: PropTypes.number.isRequired,\n};\n","import React, { useState, useEffect } from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { getUserPosts } from './api/posts';\n\nconst App = () => {\n  const [posts, setPosts] = useState([]);\n  const [userId, setUserId] = useState(0);\n  const [selectedPostId, setSelectedPostId] = useState(0);\n\n  const changePostId = (postId) => {\n    setSelectedPostId(postId);\n  };\n\n  const handleChangeUserId = (event) => {\n    const { value } = event.target;\n\n    setUserId(+value);\n  };\n\n  useEffect(() => {\n    getUserPosts(userId)\n      .then((userPostsFromServer) => {\n        setPosts(userPostsFromServer);\n      });\n  }, [userId, posts]);\n\n  return (\n    <div className=\"App\">\n      <header className=\"App__header\">\n        <label>\n          Select a user: &nbsp;\n\n          <select\n            className=\"App__user-selector\"\n            value={userId}\n            onChange={handleChangeUserId}\n          >\n            <option value=\"0\">All users</option>\n            <option value=\"1\">Leanne Graham</option>\n            <option value=\"2\">Ervin Howell</option>\n            <option value=\"3\">Clementine Bauch</option>\n            <option value=\"4\">Patricia Lebsack</option>\n            <option value=\"5\">Chelsey Dietrich</option>\n            <option value=\"6\">Mrs. Dennis Schulist</option>\n            <option value=\"7\">Kurtis Weissnat</option>\n            <option value=\"8\">Nicholas Runolfsdottir V</option>\n            <option value=\"9\">Glenna Reichert</option>\n            <option value=\"10\">Leanne Graham</option>\n          </select>\n        </label>\n      </header>\n\n      <main className=\"App__main\">\n        <div className=\"App__sidebar\">\n          <PostsList\n            posts={posts}\n            changePostId={changePostId}\n          />\n        </div>\n        <div className=\"App__content\">\n          {selectedPostId ? (\n            <PostDetails\n              postId={selectedPostId}\n            />\n          ) : (<div>Please, choose an item</div>)}\n        </div>\n      </main>\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}