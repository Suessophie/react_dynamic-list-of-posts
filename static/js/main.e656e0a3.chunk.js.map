{"version":3,"sources":["components/ButtonOpenClose/ButtonOpenClose.jsx","components/PostsList/PostsList.jsx","components/NewCommentForm/NewCommentForm.jsx","components/Loader/Loader.jsx","api/api.js","api/posts.js","api/comments.js","components/ButtonShowHide/ButtonShowHide.jsx","components/PostDetails/PostDetails.jsx","App.jsx","index.js"],"names":["ButtonOpenClose","changePostId","postId","useState","isClicked","setIsClicked","type","className","onClick","PostsList","posts","map","post","key","id","userId","title","NewCommentForm","getNewComment","name","setName","email","setEmail","body","setBody","onSubmit","e","preventDefault","placeholder","value","onChange","event","target","Loader","request","url","options","fetch","then","response","ok","Error","status","statusText","json","result","data","getUserPosts","a","filter","getPostDetails","getPostComments","comments","comment","addComment","newComment","method","headers","JSON","stringify","removeComment","commentId","ButtonShowHide","commentsLength","isShowedCommentsOnClick","PostDetails","setComments","setPost","isShowedComments","setIsShowedComments","setNewComment","setCommentId","useEffect","postFromServer","commentsFromServer","length","bool","commentIdClick","newCommentFromForm","App","setPosts","setUserId","selectedPostId","setSelectedPostId","userPostsFromServer","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.e656e0a3.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\n\nexport const ButtonOpenClose = ({\n  changePostId,\n  postId,\n}) => {\n  const [isClicked, setIsClicked] = useState(false);\n\n  return (\n    <>\n      {isClicked ? (\n        <button\n          type=\"button\"\n          className=\"PostsList__button button\"\n          onClick={() => {\n            changePostId(0);\n            setIsClicked(false);\n          }}\n        >\n          Close\n        </button>\n      ) : (\n        <button\n          type=\"button\"\n          className=\"PostsList__button button\"\n          onClick={() => {\n            changePostId(postId);\n            setIsClicked(true);\n          }}\n        >\n          Open\n        </button>\n      )}\n    </>\n  );\n};\n\nButtonOpenClose.propTypes = {\n  changePostId: PropTypes.func.isRequired,\n  postId: PropTypes.number.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './PostsList.scss';\nimport { ButtonOpenClose } from '../ButtonOpenClose';\n\nexport const PostsList = ({\n  posts,\n  changePostId,\n}) => (\n  <div className=\"PostsList\">\n    <h2>Posts:</h2>\n\n    <ul className=\"PostsList__list\">\n      {posts.map(post => (\n        <li\n          key={post.id}\n          className=\"PostsList__item\"\n        >\n          <div>\n            <b>{`User #${post.userId}`}</b>\n            <br />\n            {post.title}\n          </div>\n          <ButtonOpenClose\n            changePostId={changePostId}\n            postId={post.id}\n          />\n        </li>\n      ))}\n    </ul>\n  </div>\n);\n\nPostsList.propTypes = {\n  posts: PropTypes.arrayOf(PropTypes.shape({\n    id: PropTypes.number.isRequired,\n    userId: PropTypes.number.isRequired,\n    title: PropTypes.string.isRequired,\n  }).isRequired).isRequired,\n  changePostId: PropTypes.func.isRequired,\n};\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport './NewCommentForm.scss';\n\nexport const NewCommentForm = ({\n  postId,\n  getNewComment,\n}) => {\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n  const [body, setBody] = useState('');\n  const id = 888;\n\n  const setValueName = (event) => {\n    const { value } = event.target;\n\n    setName(value);\n  };\n\n  const setValueEmail = (event) => {\n    const { value } = event.target;\n\n    setEmail(value);\n  };\n\n  const setValueBody = (event) => {\n    const { value } = event.target;\n\n    setBody(value);\n  };\n\n  const handleSubmitNewComment = (e) => {\n    e.preventDefault();\n\n    const newComment = {\n      id,\n      postId,\n      name,\n      email,\n      body,\n    };\n\n    getNewComment(newComment);\n\n    setName('');\n    setEmail('');\n    setBody('');\n  };\n\n  return (\n    <form\n      className=\"NewCommentForm\"\n      onSubmit={handleSubmitNewComment}\n    >\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"name\"\n          placeholder=\"Your name\"\n          className=\"NewCommentForm__input\"\n          value={name}\n          onChange={setValueName}\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"email\"\n          placeholder=\"Your email\"\n          className=\"NewCommentForm__input\"\n          value={email}\n          onChange={setValueEmail}\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <textarea\n          name=\"body\"\n          placeholder=\"Type comment here\"\n          className=\"NewCommentForm__input\"\n          value={body}\n          onChange={setValueBody}\n        />\n      </div>\n\n      <button\n        type=\"submit\"\n        className=\"NewCommentForm__submit-button button\"\n      >\n        Add a comment\n      </button>\n    </form>\n  );\n};\n\nNewCommentForm.propTypes = {\n  postId: PropTypes.number.isRequired,\n  getNewComment: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","export const BASE_URL = 'https://mate-api.herokuapp.com';\n\nexport const request = (url, options) => fetch(`${BASE_URL}${url}`, options)\n  .then((response) => {\n    if (!response.ok) {\n      throw new Error(`${response.status} - ${response.statusText}`);\n    }\n\n    return response.json();\n  })\n  .then(result => result.data);\n\nexport const post = (url, data) => request(url, {\n  method: 'POST',\n  headers: {\n    'Content-type': 'application/json; charset=UTF-8',\n  },\n  body: JSON.stringify(data),\n});\n\nexport const remove = url => request(url, {\n  method: 'DELETE',\n});\n","import { request } from './api';\n\nexport const getUserPosts = async(userId) => {\n  const posts = await request('/posts');\n\n  if (!userId) {\n    return posts;\n  }\n\n  return posts.filter(post => post.userId === userId);\n};\n\nexport const getPostDetails = async(postId) => {\n  const post = await request(`/posts/${postId}`);\n\n  if (!postId) {\n    return null;\n  }\n\n  return post;\n};\n","import { request, post, remove } from './api';\n\nexport const getPostComments = async(postId) => {\n  const comments = await request('/comments');\n\n  if (!postId) {\n    return [];\n  }\n\n  return comments.filter(comment => comment.postId === postId);\n};\n\nexport const addComment = newComment => post('/comments', {\n  newComment,\n});\n\nexport const removeComment = commentId => remove(`/comments/${commentId}`);\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\n\nexport const ButtonShowHide = ({\n  commentsLength,\n  isShowedCommentsOnClick,\n}) => {\n  const [isClicked, setIsClicked] = useState(false);\n\n  return (\n    <>\n      {isClicked ? (\n        <button\n          type=\"button\"\n          className=\"button\"\n          onClick={() => {\n            setIsClicked(false);\n            isShowedCommentsOnClick(false);\n          }}\n        >\n          {`Hide ${commentsLength} comments`}\n        </button>\n      ) : (\n        <button\n          type=\"button\"\n          className=\"button\"\n          onClick={() => {\n            setIsClicked(true);\n            isShowedCommentsOnClick(true);\n          }}\n        >\n          {`Show ${commentsLength} comments`}\n        </button>\n      )}\n    </>\n  );\n};\n\nButtonShowHide.propTypes = {\n  commentsLength: PropTypes.number.isRequired,\n  isShowedCommentsOnClick: PropTypes.func.isRequired,\n};\n","import React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { NewCommentForm } from '../NewCommentForm';\nimport './PostDetails.scss';\nimport { Loader } from '../Loader';\nimport { getPostDetails } from '../../api/posts';\nimport { getPostComments, addComment, removeComment } from '../../api/comments';\nimport { ButtonShowHide } from '../ButtonShowHide';\n\nexport const PostDetails = ({ postId }) => {\n  const [comments, setComments] = useState([]);\n  const [post, setPost] = useState(null);\n  const [isShowedComments, setIsShowedComments] = useState(false);\n  const [newComment, setNewComment] = useState(null);\n  const [commentId, setCommentId] = useState(0);\n\n  const getNewComment = (newCommentFromForm) => {\n    setNewComment(newCommentFromForm);\n  };\n\n  const getCommentId = (commentIdClick) => {\n    setCommentId(commentIdClick);\n  };\n\n  useEffect(() => {\n    getPostDetails(postId)\n      .then((postFromServer) => {\n        setPost(postFromServer);\n      });\n\n    getPostComments(postId)\n      .then((commentsFromServer) => {\n        setComments(commentsFromServer);\n      });\n\n    addComment(newComment)\n      .then();\n\n    removeComment(commentId)\n      .then();\n  }, [postId, comments, post, newComment, commentId]);\n\n  const isShowedCommentsOnClick = (bool) => {\n    setIsShowedComments(bool);\n  };\n\n  return (\n    <>\n      {!post ? (\n        <Loader />\n      ) : (\n        <div className=\"PostDetails\">\n          <h2>Post details:</h2>\n\n          <section className=\"PostDetails__post\">\n            <p>{post.body}</p>\n          </section>\n\n          {!!comments.length && (\n            <section className=\"PostDetails__comments\">\n              <ButtonShowHide\n                commentsLength={comments.length}\n                isShowedCommentsOnClick={isShowedCommentsOnClick}\n              />\n              {isShowedComments && (\n                <ul className=\"PostDetails__list\">\n                  {comments.map(comment => (\n                    <li\n                      key={comment.id}\n                      className=\"PostDetails__list-item\"\n                    >\n                      <button\n                        type=\"button\"\n                        className=\"PostDetails__remove-button button\"\n                        onClick={() => getCommentId(comment.id)}\n                      >\n                        X\n                      </button>\n                      <p>{comment.body}</p>\n                    </li>\n                  ))}\n                </ul>\n              )}\n            </section>\n          )}\n\n          <section>\n            <div className=\"PostDetails__form-wrapper\">\n              <NewCommentForm\n                postId={postId}\n                getNewComment={getNewComment}\n              />\n            </div>\n          </section>\n        </div>\n      )}\n    </>\n  );\n};\n\nPostDetails.propTypes = {\n  postId: PropTypes.number.isRequired,\n};\n","import React, { useState, useEffect } from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { getUserPosts } from './api/posts';\n\nconst App = () => {\n  const [posts, setPosts] = useState([]);\n  const [userId, setUserId] = useState(0);\n  const [selectedPostId, setSelectedPostId] = useState(0);\n\n  const changePostId = (postId) => {\n    setSelectedPostId(postId);\n  };\n\n  const handleChangeOnSelect = (event) => {\n    const { value } = event.target;\n\n    setUserId(+value);\n  };\n\n  useEffect(() => {\n    getUserPosts(userId)\n      .then((userPostsFromServer) => {\n        setPosts(userPostsFromServer);\n      });\n  }, [userId, posts]);\n\n  return (\n    <div className=\"App\">\n      <header className=\"App__header\">\n        <label>\n          Select a user: &nbsp;\n\n          <select\n            className=\"App__user-selector\"\n            value={userId}\n            onChange={handleChangeOnSelect}\n          >\n            <option value=\"0\">All users</option>\n            <option value=\"1\">Leanne Graham</option>\n            <option value=\"2\">Ervin Howell</option>\n            <option value=\"3\">Clementine Bauch</option>\n            <option value=\"4\">Patricia Lebsack</option>\n            <option value=\"5\">Chelsey Dietrich</option>\n            <option value=\"6\">Mrs. Dennis Schulist</option>\n            <option value=\"7\">Kurtis Weissnat</option>\n            <option value=\"8\">Nicholas Runolfsdottir V</option>\n            <option value=\"9\">Glenna Reichert</option>\n            <option value=\"10\">Leanne Graham</option>\n          </select>\n        </label>\n      </header>\n\n      <main className=\"App__main\">\n        <div className=\"App__sidebar\">\n          <PostsList\n            posts={posts}\n            changePostId={changePostId}\n          />\n        </div>\n        <div className=\"App__content\">\n          {selectedPostId ? (\n            <PostDetails\n              postId={selectedPostId}\n            />\n          ) : (<div>Please, choose an item</div>)}\n        </div>\n      </main>\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}